from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.views import APIView
from django.shortcuts import get_object_or_404
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from .models import ChatData
from .serializers import ChatDataSerializer, ChatDataUpsertSerializer


# Swagger schemas for documentation
chat_data_request_schema = openapi.Schema(
    type=openapi.TYPE_OBJECT,
    properties={
        'number': openapi.Schema(
            type=openapi.TYPE_STRING, 
            description='Unique identifier for the chat session. If provided and exists, will update existing record. If not provided, auto-generates a unique ID.',
            example='A1B2C3D4'
        ),
        'initial_questions': openapi.Schema(
            type=openapi.TYPE_STRING, 
            description='The initial questions from the user',
            example='What are your symptoms? I have a headache and fever.'
        ),
        'llm_questions': openapi.Schema(
            type=openapi.TYPE_STRING, 
            description='Questions generated by the LLM system',
            example='How long have you had these symptoms? Any other symptoms?'
        ),
        'pre_diagnosis': openapi.Schema(
            type=openapi.TYPE_STRING, 
            description="Pre-diagnostic analysis of the user's condition",
            example='Possible viral infection based on symptoms'
        ),
        'comments': openapi.Schema(
            type=openapi.TYPE_STRING, 
            description='Comments from sub-agent analysis',
            example='Patient reports improvement after 24 hours'
        ),
        'score': openapi.Schema(
            type=openapi.TYPE_STRING, 
            description='Priority score for medical triage',
            example='Media prioridad',
            enum=['Alta prioridad', 'Media prioridad', 'Baja prioridad']
        ),
        'filled_doc': openapi.Schema(
            type=openapi.TYPE_STRING, 
            description='Complete diagnostic document with detailed analysis',
            example='Complete diagnostic report with treatment recommendations'
        ),
    },
    required=[],  # All fields are optional
)

chat_data_response_schema = openapi.Schema(
    type=openapi.TYPE_OBJECT,
    properties={
        'id': openapi.Schema(type=openapi.TYPE_INTEGER, description='Database ID'),
        'number': openapi.Schema(type=openapi.TYPE_STRING, description='Unique chat session identifier'),
        'initial_questions': openapi.Schema(type=openapi.TYPE_STRING, description='Initial user questions'),
        'llm_questions': openapi.Schema(type=openapi.TYPE_STRING, description='LLM-generated questions'),
        'pre_diagnosis': openapi.Schema(type=openapi.TYPE_STRING, description='Pre-diagnostic analysis'),
        'comments': openapi.Schema(type=openapi.TYPE_STRING, description='Analysis comments'),
        'score': openapi.Schema(type=openapi.TYPE_STRING, description='Priority score'),
        'filled_doc': openapi.Schema(type=openapi.TYPE_STRING, description='Complete diagnostic document'),
        'created_at': openapi.Schema(type=openapi.TYPE_STRING, format='date-time', description='Creation timestamp'),
        'updated_at': openapi.Schema(type=openapi.TYPE_STRING, format='date-time', description='Last update timestamp'),
    }
)


class ChatDataUpsertView(APIView):
    """Unified API view to create or update chat data"""
    permission_classes = [AllowAny]
    
    @swagger_auto_schema(
        operation_id='chat_data_upsert',
        operation_description='Create or update chat data. If "number" is provided and exists, updates the existing record. If "number" is not provided or doesn\'t exist, creates a new record with auto-generated number.',
        operation_summary='Create or Update Chat Data',
        request_body=chat_data_request_schema,
        responses={
            200: openapi.Response('Updated successfully', chat_data_response_schema),
            201: openapi.Response('Created successfully', chat_data_response_schema),
            400: openapi.Response('Bad Request', openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    'field_name': openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_STRING))
                }
            )),
        },
        tags=['Chat Data'],
    )
    def post(self, request, *args, **kwargs):
        """
        Create or update chat data.
        If 'number' is provided and exists, update the existing record.
        If 'number' is not provided or doesn't exist, create a new record.
        """
        number = request.data.get('number')
        chat_data = None
        
        # Try to find existing chat data by number
        if number:
            try:
                chat_data = ChatData.objects.get(number=number)
            except ChatData.DoesNotExist:
                pass
        
        if chat_data:
            # Update existing chat data
            serializer = ChatDataUpsertSerializer(chat_data, data=request.data, partial=True)
            serializer.is_valid(raise_exception=True)
            chat_data = serializer.save()
            response_serializer = ChatDataSerializer(chat_data)
            return Response(response_serializer.data, status=status.HTTP_200_OK)
        else:
            # Create new chat data
            serializer = ChatDataUpsertSerializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            chat_data = serializer.save()
            response_serializer = ChatDataSerializer(chat_data)
            return Response(response_serializer.data, status=status.HTTP_201_CREATED)


class ChatDataByNumberView(generics.ListAPIView):
    """API view to get all chat sessions with a specific number"""
    serializer_class = ChatDataSerializer
    permission_classes = [AllowAny]
    
    @swagger_auto_schema(
        operation_id='chat_data_by_number',
        operation_description='Retrieve all chat sessions with a specific number/identifier',
        operation_summary='Get Chat Data by Number',
        responses={
            200: openapi.Response('Success', openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=chat_data_response_schema
            )),
        },
        tags=['Chat Data'],
        manual_parameters=[
            openapi.Parameter(
                'number',
                openapi.IN_PATH,
                description='The unique number/identifier of the chat session',
                type=openapi.TYPE_STRING,
                required=True,
                example='A1B2C3D4'
            ),
        ]
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)
    
    def get_queryset(self):
        """Get all chats with the specified number"""
        number = self.kwargs.get('number')
        return ChatData.objects.filter(number=number).order_by('-created_at')

